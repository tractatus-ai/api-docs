{
  "openapi": "3.0.2",
  "info": {
    "title": "Tractatus AI API",
    "version": "0.1.1"
  },
  "paths": {
    "/deploy/endpoint/{endpoint_id}": {
      "get": {
        "summary": "Read Endpoint By ID",
        "operationId": "read_endpoint_by_id_deploy_endpoint__endpoint_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Endpoint Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "endpoint_id",
            "in": "path"
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "title": "Tractatus API Key",
              "description": "Universal API Key used for authentication and to access all models, provided by Tractatus AI",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployEndpoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Endpoint Not Found Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Start an asynchronous inference using information stored in the target endpoint.",
        "operationId": "document_inference_deploy_endpoint__endpoint_id__post",
        "parameters": [
          {
            "name": "endpoint_id",
            "required": true,
            "in": "path",
            "schema": {
              "title": "Endpoint Id",
              "description": "Unique endpoint ID used to select a specific prompt template, model, configs and pre-indexed document set used during inference time. You can generate your own `endpoint_id` in the Tractatus AI platform.",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "title": "Tractatus API Key",
              "description": "Universal API Key used for authentication and to access all models, provided by Tractatus AI",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncInferenceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "403": {
            "description": "Endpoint Inactive Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpError"
                }
              }
            }
          },
          "404": {
            "description": "Endpoint Not Found Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/endpoint/{endpoint_id}/result/{inference_id}": {
      "get": {
        "summary": "Get Inference Status and Result",
        "operationId": "deploy_endpoint__endpoint_id__result__inference_id__get",
        "parameters": [
          {
            "name": "endpoint_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Endpoint Id",
              "description": "Unique endpoint ID used to select a specific Deploy Endpoint. This ID should match the original `endpoint_id` provided in the Inference Start request.",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inference_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Inference Id",
              "description": "Unique inference ID that was returned in the original Start Inference request under the `id` property of the JSON response.",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "title": "Tractatus API Key",
              "description": "Universal API Key used for authentication and to access all models, provided by Tractatus AI",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InferenceResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Endpoint or Inference ID Not Found Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/document/process": {
      "post": {
        "summary": "Start Processing Documents",
        "description": "Extract text from each document and index the document set for inference. If the document is a flat PDF or image, OCR will be performed. Excel files will have the first sheet extracted as a CSV file. If multiple files are provided, they will be indexed together as a single index.",
        "operationId": "deploy_document_process__post",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "title": "Tractatus API Key",
              "description": "Universal API Key used for authentication and to access all models, provided by Tractatus AI",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentProcessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentProcessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "403": {
            "description": "Endpoint Inactive Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpError"
                }
              }
            }
          },
          "404": {
            "description": "Endpoint Not Found Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/document/{document_set_id}/status": {
      "get": {
        "summary": "Get Document Processing Status",
        "operationId": "deploy_document__document_set_id__status_get",
        "parameters": [
          {
            "name": "document_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Document Set Id",
              "description": "Unique document set identifier for which the processing status will be returned.",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "title": "Tractatus API Key",
              "description": "Universal API Key used for authentication and to access all models, provided by Tractatus AI",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentProcessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "InferenceRequest": {
        "title": "Inference Request",
        "type": "object",
        "properties": {
          "inputs": {
            "$ref": "#/components/schemas/Inputs"
          },
          "context": {
            "$ref": "#/components/schemas/Context"
          }
        }
      },
      "Inputs": {
        "title": "Inputs",
        "description": "Parametrized input variables that will populate the prompt template stored in the deployed endpoint.",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "Context": {
        "title": "Context",
        "description": "Container for any context (external data sources) on which the LLM will run the inference query.",
        "type": "object",
        "properties": {
          "document_set_id": {
            "title": "Document Set ID",
            "description": "Optional identifier that uniquely identifies a pre-processed and indexed document set. If this property is omitted, the default document_set_id used in the deployed endpoint will be used. If this property is provided, it will override the default endpoint ID stored in the deployed endpoint.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "AsyncInferenceResponse": {
        "title": "Async Inference Response",
        "required": [
          "request_id",
          "type",
          "inference_ids"
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "title": "Request ID",
            "description": "Unique ID that identifies a specific request, which may invoke multiple inferences.",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "title": "Type",
            "description": "Type of inference output",
            "type": "string",
            "enum": [
              "text",
              "image"
            ]
          },
          "inference_ids": {
            "title": "Inference Id",
            "description": "Unique ID for the inference that was executed.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "InferenceResult": {
        "title": "Inference Result",
        "required": [
          "request_id",
          "inference_id",
          "status",
          "output_type",
          "output_format",
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "title": "Request ID",
            "description": "Unique ID that identifies the inference request, which may produce multiple inferences results.",
            "type": "string",
            "format": "uuid"
          },
          "inference_id": {
            "title": "Inference Id",
            "description": "Unique ID for the inference that was executed.",
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "title": "Status",
            "description": "Status of the document processing/inference request.",
            "type": "string",
            "enum": [
              "PROCESSING_DOCUMENT",
              "INFERENCE_IN_PROGRESS",
              "COMPLETED",
              "ERROR"
            ]
          },
          "message": {
            "title": "Message",
            "description": "Descriptive message provide more details into the current status or error condition.",
            "type": "string"
          },
          "output_type": {
            "title": "Output Type",
            "description": "Type of inference output",
            "type": "string",
            "enum": [
              "text",
              "image"
            ]
          },
          "output_format": {
            "title": "Output Format",
            "description": "Format of inference output. If output_type is 'text', then type will be 'text. If output_type is 'image', then 'output_format' will be 'url'.",
            "type": "string",
            "enum": [
              "text",
              "url"
            ]
          },
          "output": {
            "title": "Output",
            "description": "Final output that contains the information extracted from the input context document. The format is specific to the use case, but the default is JSON format.",
            "type": "string"
          },
          "latency_ms": {
            "title": "Inference Latency (ms)",
            "description": "Number of milliseconds elapsed since the start of the inference to the successful completion or error.",
            "type": "integer"
          }
        }
      },
      "DocumentProcessRequest": {
        "title": "Document Process Request",
        "type": "object",
        "properties": {
          "file_urls": {
            "title": "File Urls",
            "description": "List of publicly available file URLs that will be processed and indexed to be used as context for inference.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DocumentProcessResponse": {
        "title": "Document Process Response",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Unique Document Set ID associated with the processed and indexed document set.",
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "title": "Created At",
            "description": "ISO Timestamp at which the document processing request was received.",
            "type": "string"
          },
          "modified_at": {
            "title": "Modified At",
            "description": "ISO Timestamp at which the document processing status was last updated.",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "description": "Status of the document processing request.",
            "type": "string",
            "enum": [
              "NOT_STARTED",
              "TEXTRACT_IN_PROGRESS",
              "INDEXING_IN_PROGRESS",
              "COMPLETED",
              "ERROR"
            ]
          }
        }
      },
      "DeployEndpoint": {
        "title": "DeployEndpoint",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "name",
          "description",
          "model",
          "prompt_template",
          "status",
          "owner_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Unique ID for each endpoint",
            "type": "string",
            "format": "uuid",
            "example": "294cf8bf-1cdb-4866-bef7-bb1f6a18c582"
          },
          "created_at": {
            "title": "Created At",
            "description": "ISO format date and UTC time at which the database entry was created.",
            "type": "string",
            "example": "2023-01-18T07:37:39.153212+00:00"
          },
          "modified_at": {
            "title": "Modified At",
            "description": "ISO format date and UTC time at which the database entry was modified in place.",
            "type": "string",
            "example": "2023-01-18T07:37:39.153212+00:00"
          },
          "name": {
            "title": "Name",
            "description": "Human-readable endpoint name, must be unique per user.",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "description": "Description providing additional details about endpoint usage.",
            "type": "string"
          },
          "domain": {
            "title": "Domain",
            "description": "Format of endpoint output.",
            "type": "string",
            "enum": [
              "text",
              "image"
            ]
          },
          "task": {
            "title": "Task",
            "description": "Use case for which this endpoint was created.",
            "type": "string",
            "enum": [
              "Text Generation",
              "Text Understanding",
              "Image Generation"
            ]
          },
          "model": {
            "title": "Model",
            "description": "LLM model that will be used to perform inference for this endpoint",
            "type": "object",
            "properties": {
              "slug": {
                "title": "Model Slug",
                "description": "Unique model identifier",
                "type": "string"
              }
            }
          },
          "config": {
            "title": "Config",
            "description": "Model configuration parameters that will provided to the target model during inference.",
            "type": "object",
            "default": {}
          },
          "prompt_template": {
            "title": "Prompt Template",
            "description": "Parametrized prompt template that will be resolved using the input variables and input to the LLM for inference.",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "description": "Current endpoint status. If endpoint is inactive, and calls will return a 403 Forbidden error.",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "owner_id": {
            "title": "Owner Id",
            "description": "Unique ID associated with the user who originally created the endpoint.",
            "type": "string",
            "format": "uuid"
          },
          "context_id": {
            "title": "Context Id",
            "description": "Optional ID associated with the document(s) that will be used as context to the LLM during inference.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "HttpError": {
        "title": "HTTPError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "string"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "description": "Location in the request where the validation error occurred, e.g. `body`, `header`, `path`.",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "description": "Description of the validation error that occurred.",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "description": "Type of validation error that occurred, e.g. `type_error`, `value_error`, etc.",
            "type": "string"
          }
        }
      }
    }
  }
}